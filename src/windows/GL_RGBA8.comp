#version 430 core

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(rgba8, binding = 0) readonly uniform image2D imgInput;
layout(rgba8, binding = 1) writeonly uniform image2D imgOutput;

layout(std430, binding = 0) buffer matBuffer {
    float mat[];
};
layout(location=0) uniform int n;
layout(location=1) uniform int ns;
layout(location=2) uniform int m;
layout(location=3) uniform int ms;

/* x and y are swapped for some reason
 therefore we swap width and height */
layout(location=4) uniform int height;
layout(location=5) uniform int width;

void main() {
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);

    vec4 value = vec4(0, 0, 0, 1);
    for(int i = -ns; i < n - ns; ++i) {
        for(int j = -ms; j < m - ms; ++j) {
            ivec2 coord = texelCoord;
            coord.x += i;
            coord.y += j;
            if(!(coord.x >= 0 && coord.x < width))
                continue;
            if(!(coord.y >= 0 && coord.y < height))
                continue;

            value += mat[(ns + i) * n + ms + j] * imageLoad(imgInput, coord);
        }
    }
    value.w = min(value.w, 1);

    imageStore(imgOutput, texelCoord, value);
}